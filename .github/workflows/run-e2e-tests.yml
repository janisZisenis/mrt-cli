name: Run E2E Tests

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch: 

env:
  binary-path: "build/bin"
  binary-name: "mrt-linux-amd64"

jobs:
  platform-detection:
    runs-on: ubuntu-latest
    outputs:
      platform: ${{ steps.set-platform.outputs.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup mrt
        run: echo "$(pwd)/bin/github" >> $GITHUB_PATH
      - name: Run detection script
        id: run_script
        run: |
          PLATFORM=$(mrt run detect-platform)
          echo "$PLATFORM"
          echo "::set-output name=platform::${PLATFORM}"
      - name: Set Platform
        id: set-matrix
        run: |
          echo "${{ steps.run_script.outputs.platform }}"
          echo "::set-output name=platform::${{ steps.run_script.outputs.platform }}"
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup mrt
        run: echo "$(pwd)/bin/github" >> $GITHUB_PATH
      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v5
        with:
          go-version-file: app/go.mod
      - name: Build binary
        run: |
          command="mrt run build -- --commit-sha ${{ github.sha }}"

          if [[ ${{ github.ref }} == 'refs/tags/' ]]
          then
            command+=" --semver ${{ github.ref_name }}"
          fi

          $command
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.binary-name }}
          path: ${{ env.binary-path }}
          retention-days: 7
  run-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup mrt
        run: echo "$(pwd)/bin/github" >> $GITHUB_PATH
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.binary-name }}
          path: ${{ env.binary-path }}
      - name: Make binary executable
        run: chmod 755 $(mrt run binary-location)
      - name: Setup git config
        run: |
          git config --global user.email "ci@multi-repository-tool.com"
          git config --global user.name "MRT-CI-User"
      - name: Setup ssh
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > .ssh/private-key
          chmod 400 ./.ssh/private-key
          mkdir -p $HOME/.ssh
          sed "s*WORKSPACE_DIR*$GITHUB_WORKSPACE*g" .ssh/config > $HOME/.ssh/config
          cat $HOME/.ssh/config
      - name: Run E2E Tests
        run: mrt run e2e-tests
  release:
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup mrt
        run: echo "$(pwd)/bin/github" >> $GITHUB_PATH
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.binary-name }}
          path: ${{ env.binary-path }}
      - name: Make binary executable
        run: chmod 755 $(mrt run binary-location)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: ""
          draft: false
          prerelease: false
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.binary-path }}/${{ env.binary-name }}
          asset_name: ${{ env.binary-name }}
          asset_content_type: application/octet-stream
  