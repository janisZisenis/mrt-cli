#!/usr/bin/env bash

bats_load_library "fileAssertions"
bats_load_library "scriptWriter"

commandFileName() {
	echo "command"
}

writeSpyCommand() {
	local commandLocation="$1"
	local commandName="$2"

	local commandPath
	commandPath="$commandLocation/$commandName/$(commandFileName)"

	writeSpyScript "$commandPath"
}

writeStubCommand() {
	local commandLocation="$1"
	local commandName="$2"
	local exitCode="$3"
	local output="$4"

  local commandPath
	commandPath="$commandLocation/$commandName/$(commandFileName)"

	writeStubScript "$commandPath" "$exitCode" "$output"
}

writeStdErrCommand() {
	local commandLocation="$1"
	local commandName="$2"
	local error="$3"

	writeStdErrScript "$commandLocation/$commandName/$(commandFileName)" "$error"
}

writeCommandRequestingInput() {
	local commandLocation="$1"
	local commandName="$2"

	writeScriptRequestingInput "$commandLocation/$commandName/$(commandFileName)"
}

assert_command_received_input() {
	local commandLocation="$1"
	local commandName="$2"
	local input="$3"

	assert_file_exists "$commandLocation/$commandName/$input"
}

assert_command_spy_file_has_content() {
	local commandLocation="$1"
	local commandName="$2"
	local content="$3"

	assert_spy_file_has_content "$commandLocation/$commandName/$(commandFileName)" "$content"
}

assert_command_spy_file_exists() {
	local commandLocation="$1"
	local commandName="$2"

	assert_spy_file_exists "$commandLocation/$commandName/$(commandFileName)"
}

assert_command_spy_file_does_not_exist() {
	local commandLocation="$1"
	local commandName="$2"

	assert_spy_file_does_not_exist "$commandLocation/$commandName/$(commandFileName)"
}
