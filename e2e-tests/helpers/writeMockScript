#!/usr/bin/env bash

bats_load_library "fileAssertions"

spyFileSuffix() {
	echo "Executed"
}

writeSpyScript() {
	local commandPath
	commandPath=$1

  local commandName
  local content

  commandName="$(basename "$commandPath")"
  content="$(makeSpyScript "$commandName")"

	writeScript "$content" "$commandPath"
}

writeScript() {
  local content="$1"
  local scriptPath="$2"

	mkdir -p "$(dirname "$scriptPath")"

  echo "$content" > "$scriptPath"
  chmod +x "$scriptPath"
}

makeSpyScript() {
  local commandName="$1"

cat <<EOF
#!/bin/bash

SCRIPT_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
echo "\$@" > "\$SCRIPT_DIR/$commandName$(spyFileSuffix)"
EOF
}

writeStubScript() {
	local commandPath=$1
	local exitCode=$2
	local output=$3

  content="$(makeStubScript "$output" "$exitCode")"
  writeScript "$content" "$commandPath"
}

makeStubScript() {
  local output="$1"
  local exitCode="$2"

cat <<EOF
#!/bin/bash

echo "$output"
exit $exitCode
EOF
}

writeScriptRequestingInput() {
	local commandPath=$1

	mkdir -p "$(dirname "$commandPath")"
	local commandName
	commandName="$(basename "$commandPath")"

	cat <<EOF >"$commandPath"
#!/bin/bash

SCRIPT_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
read -r input
touch "\$SCRIPT_DIR/\$input"
EOF

	chmod +x "$commandPath"
}

writeStdErrScript() {
	local commandPath=$1
	local errorMessage=$2

	mkdir -p "$(dirname "$commandPath")"
	local commandName
	commandName="$(basename "$commandPath")"

	cat <<EOF >"$commandPath"
#!/bin/bash

echo "$errorMessage" 1>&2
EOF

	chmod +x "$commandPath"
}

assert_spy_file_has_content() {
	spyFile=$1$(spyFileSuffix)
	expectedContent=$2

	actualContent="$(cat "$spyFile")"

	assert_equal "$actualContent" "$expectedContent"
}

assert_spy_file_exists() {
	assert_file_exists "$1$(spyFileSuffix)"
}

assert_spy_file_does_not_exist() {
	assert_file_does_not_exist "$1$(spyFileSuffix)"
}
