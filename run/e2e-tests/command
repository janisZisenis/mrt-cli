#!/usr/bin/env bash
set -e

FLAG_LOCAL="--local"
FLAG_REMOTE="--remote"
FLAG_CLEAN="--clean"
FLAG_MANUAL="--manual"
FLAG_CI="--ci"
KEEP_TEST_RUN="--keep"
FLAG_HELP_SHORT="-h"
FLAG_HELP_LONG="--help"

declare -A HOSTNAME_MAP=(
	["$FLAG_LOCAL"]="localhost"
	["$FLAG_REMOTE"]="github.com"
)

function display_help() {
	cat <<EOF
Usage: mrt run $(basename "$(dirname "$0")") [OPTIONS] [FILES...]

Run end-to-end tests with various options.

Options:
  $FLAG_LOCAL|$FLAG_REMOTE   Use the local gitlab or github.com to run e2e-tests (default: remote).
  $FLAG_CLEAN            Perform a clean build before running the tests.
  $FLAG_MANUAL|FLAG_CI   Determines whether tests are run manually or on from CI.
  $KEEP_TEST_RUN           Do not clean up temporary directories after tests complete.
  $FLAG_HELP_SHORT|$FLAG_HELP_LONG          Display this help message and exit.

FILES:
  List of specific .bats test files to be executed. If not provided,
  the script will find all .bats files in the e2e-tests directory.
EOF
}

rootDir="$1"
shift
clean_build=false
run_mode="$FLAG_MANUAL"
hostname="${HOSTNAME_MAP[$FLAG_REMOTE]}"
no_tempdir_cleanup=false
declare -a files

while [[ $# -gt 0 ]]; do
	case "$1" in
	"$FLAG_LOCAL" | "$FLAG_REMOTE")
		hostname="${HOSTNAME_MAP[$1]}"
		shift
		;;
	"$FLAG_CLEAN")
		clean_build=true
		shift
		;;
	"$FLAG_MANUAL" | "$FLAG_CI")
		run_mode="$1"
		shift
		;;
	"$KEEP_TEST_RUN")
		no_tempdir_cleanup=true
		shift
		;;
	"$FLAG_HELP_SHORT" | "$FLAG_HELP_LONG")
		display_help
		exit 0
		;;
	--*)
		echo "Error: Unknown option '$1'."
		echo
		display_help
		exit 1
		;;
	*)
		files+=("$@")
		break
		;;
	esac
done

SSH_CONFIG_FILE="$rootDir/.ssh/config"
PRIVATE_KEY_FILE="$rootDir/.ssh/private-key"
HOST_ALIAS="github-testing"

if [[ ! -f "$PRIVATE_KEY_FILE" ]]; then
	echo "Error: Private key file not found at $PRIVATE_KEY_FILE"
	exit 1
fi

mkdir -p "$(dirname "$SSH_CONFIG_FILE")"
# Normally you would add "User git" to the config. But somehow this does not work on the ci. There I have to remove
# the user from the config.
cat <<EOF >"$SSH_CONFIG_FILE"
Host $HOST_ALIAS
   HostName $hostname
EOF

if [[ "$run_mode" == "$FLAG_MANUAL" ]]; then
	GITHUB_RESPONSE_MATCH="successfully authenticated"
	GITLAB_RESPONSE_MATCH="Welcome to GitLab"

	# Since "User git" is not in the config. (see above) I have to explicitly use it in the ssh access check below.
	if ! ssh -F "$SSH_CONFIG_FILE" -T "git@$HOST_ALIAS" 2>&1 | grep -qE "$GITHUB_RESPONSE_MATCH|$GITLAB_RESPONSE_MATCH"; then
		echo "Error: Could not establish SSH connection to $HOST_ALIAS."
		echo "Error: Please verify if the private key is correct."
		exit 1
	fi
fi

e2eTestDir="$rootDir/e2e-tests"

if [[ "$clean_build" == true ]]; then
	echo "Performing a clean build for e2e-tests..."
	mrt --team-dir "$rootDir" run build
fi

if [[ "${#files[@]}" -eq 0 ]]; then
	echo "No specific test files provided. Auto-detecting *.bats files..."
	mapfile -t files < <(find "$e2eTestDir" -type f -name "*.bats" ! -ipath "*/3rdParty/*")
fi

echo "Test files to be executed:"
printf "\t%s\n" "${files[@]}"

echo "Running tests with BATS..."

export GIT_SSH_COMMAND="ssh -F $SSH_CONFIG_FILE"
export BATS_LIB_PATH="$e2eTestDir/3rdParty/test_helper":"$e2eTestDir/helpers"

bats_args=("${files[@]}" --jobs 10)
if [[ "$no_tempdir_cleanup" == true ]]; then
	bats_args+=(--no-tempdir-cleanup)
fi

"$e2eTestDir"/3rdParty/bats/bin/bats "${bats_args[@]}"
