#!/usr/bin/env bash
set -e

FLAG_LOCAL="--local"
FLAG_REMOTE="--remote"
FLAG_CLEAN="--clean"
FLAG_HELP="-h|--help"

function display_help() {
  cat <<EOF
Usage: mrt run $(basename "$(dirname "$0")") [OPTIONS] [FILES...]

Run end-to-end tests with various options.

Options:
  $FLAG_LOCAL|$FLAG_REMOTE   Use the local gitlab or github.com to run e2e-tests (default: remote).
  $FLAG_CLEAN            Perform a clean build before running the tests.
  $FLAG_HELP          Display this help message and exit.

FILES:
  List of specific .bats test files to be executed. If not provided,
  the script will find all .bats files in the e2e-tests directory.
EOF
}

function has_changes_in_application() {
  local dir="$1"
  if git rev-parse --is-inside-work-tree &> /dev/null; then
    git diff --quiet "$dir" || return 0
    git diff --cached --quiet "$dir" || return 0
    git diff --quiet HEAD -- "$dir" || return 0
  else
    if find "$dir" -type f -newermt "$last_build_time" &>/dev/null; then
      return 0
    fi
  fi
  return 1
}

function perform_clean_build() {
  echo "Performing a clean build for e2e-tests..."
  mrt --team-dir "$rootDir" run build
}

function perform_clean_build_if_necessary() {
  echo "Checking for changes in $rootDir/app to determine if a clean build is necessary..."
  if has_changes_in_application "$rootDir/app"; then
    echo "Changes detected in $rootDir/app."
    perform_clean_build
  else
    echo "No changes detected in $rootDir/app. Proceeding without a clean build."
  fi
}

rootDir="$1"; shift
run_mode="$FLAG_REMOTE"
clean_build=false
declare -a files

while [[ $# -gt 0 ]]; do
  case "$1" in
    $FLAG_LOCAL|$FLAG_REMOTE)
      run_mode="$1"
      shift
      ;;
    $FLAG_CLEAN)
      clean_build=true
      shift
      ;;
    $FLAG_HELP)
      display_help
      exit 0
      ;;
    --*)
      echo "Error: Unknown option '$1'."
      echo
      display_help
      exit 1
      ;;
    *)
      files+=("$1")
      echo "files"
      ;;
  esac
done

if [[ "$clean_build" == true ]]; then
  perform_clean_build
else
  perform_clean_build_if_necessary
fi

if [[ "${#files[@]}" -eq 0 ]]; then
  echo "No specific test files provided. Auto-detecting *.bats files..."
  mapfile -t files < <(find "$rootDir/e2e-test" -type f -name "*.bats" ! -ipath "*/3rdParty/*")
fi

echo "Test files to be executed:"
printf "\t%s\n" "${files[@]}"

export BATS_LIB_PATH="$rootDir/e2e-test/3rdParty/test_helper":"$rootDir/e2e-test/helpers"
SSH_CONFIG_FILE="$rootDir/.ssh/config"
PRIVATE_KEY_FILE="$rootDir/.ssh/private-key"

mkdir -p "$(dirname "$SSH_CONFIG_FILE")"
cat <<EOF > "$SSH_CONFIG_FILE"
Host github-testing
   HostName github.com
EOF
export GIT_SSH_COMMAND="ssh -F $SSH_CONFIG_FILE"

echo "Running tests with BATS..."
"$rootDir"/e2e-test/3rdParty/bats/bin/bats "${files[@]}" --jobs 10