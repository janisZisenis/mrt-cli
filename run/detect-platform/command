#!/usr/bin/env bash

set -e

ARCH_FLAG="--arch"
OS_FLAG="--os"

help(){
  printf "Usage:"
  printf 'options:\n'
  printf -- "-h, --help\tShow this help message\n"
  printf -- '%s|%s\tPrints out os or arch. If none prints out platform (eg. %s)\n' "$OS_FLAG" "$ARCH_FLAG" "$(detect_os)/$(detect_arch)"
}

detect_os() {
    unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)     OS=linux;;
        Darwin*)    OS=darwin;;
        CYGWIN*)    OS=windows;;
        MINGW*)     OS=windows;;
        *)          OS="UNKNOWN:${unameOut}"
    esac
    echo "${OS}"
}

detect_arch() {
    archOut="$(uname -m)"
    case "${archOut}" in
        x86_64)    ARCH=amd64;;
        i686)      ARCH=386;;
        i386)      ARCH=386;;
        armv7l)    ARCH=arm;;
        aarch64)   ARCH=arm64;;
        arm64)     ARCH=arm64;;
        *)         ARCH="UNKNOWN:${archOut}"
    esac
    echo "${ARCH}"
}

shift
while [ "$#" -gt 0 ]; do
  case $1 in
    --help|-h)
      help;
      exit 1
      ;;
    "$ARCH_FLAG"|"$OS_FLAG")
      if [[ -z ${shortStrategy+x} ]]
        then
          flag="$1"
          shortStrategy=${flag//--/}
        else
          echo "Either specify $ARCH_FLAG or $OS_FLAG, not both"
          exit 1
      fi
      shift;;
    *)
      echo "$1 is an invalid option";
      exit 1
      ;;
  esac
done

if [[ $shortStrategy == "${ARCH_FLAG//--/}" ]]
then
  detect_arch
  exit 0
fi

if [[ $shortStrategy == "${OS_FLAG//--/}" ]]
then
  detect_os
  exit 0
fi

echo "$(detect_os)/$(detect_arch)"